// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbLaser.proto

#include "pbLaser.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace datatype {
namespace laser {
class pbLaserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pbLaser> _instance;
} _pbLaser_default_instance_;
}  // namespace laser
}  // namespace datatype
static void InitDefaultsscc_info_pbLaser_pbLaser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datatype::laser::_pbLaser_default_instance_;
    new (ptr) ::datatype::laser::pbLaser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pbLaser_pbLaser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pbLaser_pbLaser_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pbLaser_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pbLaser_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pbLaser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pbLaser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, timestamp_),
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, x_),
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, y_),
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, z_),
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, intensity_),
  PROTOBUF_FIELD_OFFSET(::datatype::laser::pbLaser, reflectance_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datatype::laser::pbLaser)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datatype::laser::_pbLaser_default_instance_),
};

const char descriptor_table_protodef_pbLaser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpbLaser.proto\022\016datatype.laser\"e\n\007pbLas"
  "er\022\021\n\ttimestamp\030\001 \001(\003\022\t\n\001x\030\002 \003(\002\022\t\n\001y\030\003 "
  "\003(\002\022\t\n\001z\030\004 \003(\002\022\021\n\tintensity\030\005 \003(\002\022\023\n\013ref"
  "lectance\030\006 \003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pbLaser_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pbLaser_2eproto_sccs[1] = {
  &scc_info_pbLaser_pbLaser_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pbLaser_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbLaser_2eproto = {
  false, false, descriptor_table_protodef_pbLaser_2eproto, "pbLaser.proto", 142,
  &descriptor_table_pbLaser_2eproto_once, descriptor_table_pbLaser_2eproto_sccs, descriptor_table_pbLaser_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pbLaser_2eproto::offsets,
  file_level_metadata_pbLaser_2eproto, 1, file_level_enum_descriptors_pbLaser_2eproto, file_level_service_descriptors_pbLaser_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pbLaser_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pbLaser_2eproto)), true);
namespace datatype {
namespace laser {

// ===================================================================

class pbLaser::_Internal {
 public:
};

pbLaser::pbLaser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  x_(arena),
  y_(arena),
  z_(arena),
  intensity_(arena),
  reflectance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datatype.laser.pbLaser)
}
pbLaser::pbLaser(const pbLaser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_),
      intensity_(from.intensity_),
      reflectance_(from.reflectance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:datatype.laser.pbLaser)
}

void pbLaser::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

pbLaser::~pbLaser() {
  // @@protoc_insertion_point(destructor:datatype.laser.pbLaser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pbLaser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pbLaser::ArenaDtor(void* object) {
  pbLaser* _this = reinterpret_cast< pbLaser* >(object);
  (void)_this;
}
void pbLaser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pbLaser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbLaser& pbLaser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pbLaser_pbLaser_2eproto.base);
  return *internal_default_instance();
}


void pbLaser::Clear() {
// @@protoc_insertion_point(message_clear_start:datatype.laser.pbLaser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  z_.Clear();
  intensity_.Clear();
  reflectance_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pbLaser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_z(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float intensity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float reflectance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_reflectance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_reflectance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pbLaser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datatype.laser.pbLaser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated float x = 2;
  if (this->_internal_x_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_x(), target);
  }

  // repeated float y = 3;
  if (this->_internal_y_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_y(), target);
  }

  // repeated float z = 4;
  if (this->_internal_z_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_z(), target);
  }

  // repeated float intensity = 5;
  if (this->_internal_intensity_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_intensity(), target);
  }

  // repeated float reflectance = 6;
  if (this->_internal_reflectance_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_reflectance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datatype.laser.pbLaser)
  return target;
}

size_t pbLaser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datatype.laser.pbLaser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float x = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float y = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float z = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _z_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float intensity = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float reflectance = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reflectance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reflectance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbLaser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datatype.laser.pbLaser)
  GOOGLE_DCHECK_NE(&from, this);
  const pbLaser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pbLaser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datatype.laser.pbLaser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datatype.laser.pbLaser)
    MergeFrom(*source);
  }
}

void pbLaser::MergeFrom(const pbLaser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datatype.laser.pbLaser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  intensity_.MergeFrom(from.intensity_);
  reflectance_.MergeFrom(from.reflectance_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void pbLaser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datatype.laser.pbLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbLaser::CopyFrom(const pbLaser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datatype.laser.pbLaser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbLaser::IsInitialized() const {
  return true;
}

void pbLaser::InternalSwap(pbLaser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  intensity_.InternalSwap(&other->intensity_);
  reflectance_.InternalSwap(&other->reflectance_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pbLaser::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace laser
}  // namespace datatype
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datatype::laser::pbLaser* Arena::CreateMaybeMessage< ::datatype::laser::pbLaser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datatype::laser::pbLaser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
