// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbMatrix.proto

#include "pbMatrix.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace datatype {
namespace transform {
class pbMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pbMatrix> _instance;
} _pbMatrix_default_instance_;
}  // namespace transform
}  // namespace datatype
static void InitDefaultsscc_info_pbMatrix_pbMatrix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datatype::transform::_pbMatrix_default_instance_;
    new (ptr) ::datatype::transform::pbMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pbMatrix_pbMatrix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pbMatrix_pbMatrix_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pbMatrix_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pbMatrix_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pbMatrix_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pbMatrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datatype::transform::pbMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datatype::transform::pbMatrix, rows_),
  PROTOBUF_FIELD_OFFSET(::datatype::transform::pbMatrix, cols_),
  PROTOBUF_FIELD_OFFSET(::datatype::transform::pbMatrix, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datatype::transform::pbMatrix)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datatype::transform::_pbMatrix_default_instance_),
};

const char descriptor_table_protodef_pbMatrix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016pbMatrix.proto\022\022datatype.transform\"4\n\010"
  "pbMatrix\022\014\n\004rows\030\001 \001(\r\022\014\n\004cols\030\002 \001(\r\022\014\n\004"
  "data\030\003 \003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pbMatrix_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pbMatrix_2eproto_sccs[1] = {
  &scc_info_pbMatrix_pbMatrix_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pbMatrix_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbMatrix_2eproto = {
  false, false, descriptor_table_protodef_pbMatrix_2eproto, "pbMatrix.proto", 98,
  &descriptor_table_pbMatrix_2eproto_once, descriptor_table_pbMatrix_2eproto_sccs, descriptor_table_pbMatrix_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pbMatrix_2eproto::offsets,
  file_level_metadata_pbMatrix_2eproto, 1, file_level_enum_descriptors_pbMatrix_2eproto, file_level_service_descriptors_pbMatrix_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pbMatrix_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pbMatrix_2eproto)), true);
namespace datatype {
namespace transform {

// ===================================================================

class pbMatrix::_Internal {
 public:
};

pbMatrix::pbMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datatype.transform.pbMatrix)
}
pbMatrix::pbMatrix(const pbMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:datatype.transform.pbMatrix)
}

void pbMatrix::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
}

pbMatrix::~pbMatrix() {
  // @@protoc_insertion_point(destructor:datatype.transform.pbMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pbMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pbMatrix::ArenaDtor(void* object) {
  pbMatrix* _this = reinterpret_cast< pbMatrix* >(object);
  (void)_this;
}
void pbMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pbMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbMatrix& pbMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pbMatrix_pbMatrix_2eproto.base);
  return *internal_default_instance();
}


void pbMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:datatype.transform.pbMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pbMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pbMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datatype.transform.pbMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rows(), target);
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated float data = 3;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datatype.transform.pbMatrix)
  return target;
}

size_t pbMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datatype.transform.pbMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rows());
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datatype.transform.pbMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const pbMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pbMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datatype.transform.pbMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datatype.transform.pbMatrix)
    MergeFrom(*source);
  }
}

void pbMatrix::MergeFrom(const pbMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datatype.transform.pbMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void pbMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datatype.transform.pbMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMatrix::CopyFrom(const pbMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datatype.transform.pbMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMatrix::IsInitialized() const {
  return true;
}

void pbMatrix::InternalSwap(pbMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pbMatrix, cols_)
      + sizeof(pbMatrix::cols_)
      - PROTOBUF_FIELD_OFFSET(pbMatrix, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pbMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transform
}  // namespace datatype
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datatype::transform::pbMatrix* Arena::CreateMaybeMessage< ::datatype::transform::pbMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datatype::transform::pbMatrix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
