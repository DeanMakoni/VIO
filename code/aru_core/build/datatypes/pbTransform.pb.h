// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbTransform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pbTransform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pbTransform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pbMatrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pbTransform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pbTransform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbTransform_2eproto;
namespace datatype {
namespace transform {
class pbTransform;
class pbTransformDefaultTypeInternal;
extern pbTransformDefaultTypeInternal _pbTransform_default_instance_;
}  // namespace transform
}  // namespace datatype
PROTOBUF_NAMESPACE_OPEN
template<> ::datatype::transform::pbTransform* Arena::CreateMaybeMessage<::datatype::transform::pbTransform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datatype {
namespace transform {

// ===================================================================

class pbTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datatype.transform.pbTransform) */ {
 public:
  inline pbTransform() : pbTransform(nullptr) {}
  virtual ~pbTransform();

  pbTransform(const pbTransform& from);
  pbTransform(pbTransform&& from) noexcept
    : pbTransform() {
    *this = ::std::move(from);
  }

  inline pbTransform& operator=(const pbTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline pbTransform& operator=(pbTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pbTransform& default_instance();

  static inline const pbTransform* internal_default_instance() {
    return reinterpret_cast<const pbTransform*>(
               &_pbTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pbTransform& a, pbTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(pbTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pbTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pbTransform* New() const final {
    return CreateMaybeMessage<pbTransform>(nullptr);
  }

  pbTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pbTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pbTransform& from);
  void MergeFrom(const pbTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datatype.transform.pbTransform";
  }
  protected:
  explicit pbTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbTransform_2eproto);
    return ::descriptor_table_pbTransform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kTransformMatrixFieldNumber = 5,
    kSourceTimestampFieldNumber = 3,
    kDestTimestampFieldNumber = 4,
  };
  // string source = 1;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string destination = 2;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // .datatype.transform.pbMatrix transform_matrix = 5;
  bool has_transform_matrix() const;
  private:
  bool _internal_has_transform_matrix() const;
  public:
  void clear_transform_matrix();
  const ::datatype::transform::pbMatrix& transform_matrix() const;
  ::datatype::transform::pbMatrix* release_transform_matrix();
  ::datatype::transform::pbMatrix* mutable_transform_matrix();
  void set_allocated_transform_matrix(::datatype::transform::pbMatrix* transform_matrix);
  private:
  const ::datatype::transform::pbMatrix& _internal_transform_matrix() const;
  ::datatype::transform::pbMatrix* _internal_mutable_transform_matrix();
  public:
  void unsafe_arena_set_allocated_transform_matrix(
      ::datatype::transform::pbMatrix* transform_matrix);
  ::datatype::transform::pbMatrix* unsafe_arena_release_transform_matrix();

  // int64 source_timestamp = 3;
  void clear_source_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 source_timestamp() const;
  void set_source_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_source_timestamp() const;
  void _internal_set_source_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 dest_timestamp = 4;
  void clear_dest_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 dest_timestamp() const;
  void set_dest_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dest_timestamp() const;
  void _internal_set_dest_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:datatype.transform.pbTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::datatype::transform::pbMatrix* transform_matrix_;
  ::PROTOBUF_NAMESPACE_ID::int64 source_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 dest_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbTransform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pbTransform

// string source = 1;
inline void pbTransform::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& pbTransform::source() const {
  // @@protoc_insertion_point(field_get:datatype.transform.pbTransform.source)
  return _internal_source();
}
inline void pbTransform::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:datatype.transform.pbTransform.source)
}
inline std::string* pbTransform::mutable_source() {
  // @@protoc_insertion_point(field_mutable:datatype.transform.pbTransform.source)
  return _internal_mutable_source();
}
inline const std::string& pbTransform::_internal_source() const {
  return source_.Get();
}
inline void pbTransform::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pbTransform::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datatype.transform.pbTransform.source)
}
inline void pbTransform::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:datatype.transform.pbTransform.source)
}
inline void pbTransform::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datatype.transform.pbTransform.source)
}
inline std::string* pbTransform::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pbTransform::release_source() {
  // @@protoc_insertion_point(field_release:datatype.transform.pbTransform.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbTransform::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datatype.transform.pbTransform.source)
}

// string destination = 2;
inline void pbTransform::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& pbTransform::destination() const {
  // @@protoc_insertion_point(field_get:datatype.transform.pbTransform.destination)
  return _internal_destination();
}
inline void pbTransform::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:datatype.transform.pbTransform.destination)
}
inline std::string* pbTransform::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:datatype.transform.pbTransform.destination)
  return _internal_mutable_destination();
}
inline const std::string& pbTransform::_internal_destination() const {
  return destination_.Get();
}
inline void pbTransform::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pbTransform::set_destination(std::string&& value) {
  
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datatype.transform.pbTransform.destination)
}
inline void pbTransform::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:datatype.transform.pbTransform.destination)
}
inline void pbTransform::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datatype.transform.pbTransform.destination)
}
inline std::string* pbTransform::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pbTransform::release_destination() {
  // @@protoc_insertion_point(field_release:datatype.transform.pbTransform.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pbTransform::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datatype.transform.pbTransform.destination)
}

// int64 source_timestamp = 3;
inline void pbTransform::clear_source_timestamp() {
  source_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pbTransform::_internal_source_timestamp() const {
  return source_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pbTransform::source_timestamp() const {
  // @@protoc_insertion_point(field_get:datatype.transform.pbTransform.source_timestamp)
  return _internal_source_timestamp();
}
inline void pbTransform::_internal_set_source_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  source_timestamp_ = value;
}
inline void pbTransform::set_source_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_source_timestamp(value);
  // @@protoc_insertion_point(field_set:datatype.transform.pbTransform.source_timestamp)
}

// int64 dest_timestamp = 4;
inline void pbTransform::clear_dest_timestamp() {
  dest_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pbTransform::_internal_dest_timestamp() const {
  return dest_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 pbTransform::dest_timestamp() const {
  // @@protoc_insertion_point(field_get:datatype.transform.pbTransform.dest_timestamp)
  return _internal_dest_timestamp();
}
inline void pbTransform::_internal_set_dest_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dest_timestamp_ = value;
}
inline void pbTransform::set_dest_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dest_timestamp(value);
  // @@protoc_insertion_point(field_set:datatype.transform.pbTransform.dest_timestamp)
}

// .datatype.transform.pbMatrix transform_matrix = 5;
inline bool pbTransform::_internal_has_transform_matrix() const {
  return this != internal_default_instance() && transform_matrix_ != nullptr;
}
inline bool pbTransform::has_transform_matrix() const {
  return _internal_has_transform_matrix();
}
inline const ::datatype::transform::pbMatrix& pbTransform::_internal_transform_matrix() const {
  const ::datatype::transform::pbMatrix* p = transform_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::datatype::transform::pbMatrix&>(
      ::datatype::transform::_pbMatrix_default_instance_);
}
inline const ::datatype::transform::pbMatrix& pbTransform::transform_matrix() const {
  // @@protoc_insertion_point(field_get:datatype.transform.pbTransform.transform_matrix)
  return _internal_transform_matrix();
}
inline void pbTransform::unsafe_arena_set_allocated_transform_matrix(
    ::datatype::transform::pbMatrix* transform_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_matrix_);
  }
  transform_matrix_ = transform_matrix;
  if (transform_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datatype.transform.pbTransform.transform_matrix)
}
inline ::datatype::transform::pbMatrix* pbTransform::release_transform_matrix() {
  
  ::datatype::transform::pbMatrix* temp = transform_matrix_;
  transform_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datatype::transform::pbMatrix* pbTransform::unsafe_arena_release_transform_matrix() {
  // @@protoc_insertion_point(field_release:datatype.transform.pbTransform.transform_matrix)
  
  ::datatype::transform::pbMatrix* temp = transform_matrix_;
  transform_matrix_ = nullptr;
  return temp;
}
inline ::datatype::transform::pbMatrix* pbTransform::_internal_mutable_transform_matrix() {
  
  if (transform_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::datatype::transform::pbMatrix>(GetArena());
    transform_matrix_ = p;
  }
  return transform_matrix_;
}
inline ::datatype::transform::pbMatrix* pbTransform::mutable_transform_matrix() {
  // @@protoc_insertion_point(field_mutable:datatype.transform.pbTransform.transform_matrix)
  return _internal_mutable_transform_matrix();
}
inline void pbTransform::set_allocated_transform_matrix(::datatype::transform::pbMatrix* transform_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_matrix_);
  }
  if (transform_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_matrix)->GetArena();
    if (message_arena != submessage_arena) {
      transform_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_matrix, submessage_arena);
    }
    
  } else {
    
  }
  transform_matrix_ = transform_matrix;
  // @@protoc_insertion_point(field_set_allocated:datatype.transform.pbTransform.transform_matrix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace transform
}  // namespace datatype

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pbTransform_2eproto
